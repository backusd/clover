
***** Renderer *****
- (contains) 1+ RenderPass

-----
NOTE: A RenderPass will be described by a RenderPassDescriptor, which will require specifying the 'colorAttachments' 
      aka the output texture(s) that are bound. It will also require setting the depth-stencil texture. Therefore, 
	  each render pass must set new targets. So, to decide if something should be rendered within a given pass, you
	  simply need to ask 'Do we want to set a new output target and depth-stencil?'
-----
***** RenderPass *****
>> Mental Model: "A RenderPass covers the whole process of setting the output textures and depth-stencil, and all
                  subsequent draw calls until the results in the ouput textures are finalized."
- (contains) RenderPassDescriptor
- (contains) 0+ BindGroup
	* This is for bind groups that do NOT change across RenderPassLayers. Example: Setting the camera model-view-projection matrix
	* Convention will be for these bind groups to use @group(0)
- (contains) 1+ RenderPassLayers


***** RenderPassDescriptor *****
- (contains) 1+ GPURenderPassColorAttachment
- (contains) GPURenderPassDepthStencilAttachment
- (contains) [user-defined callback] Prepare()
	* Will be called immediately before encoding render pass commands
	* Common use case is to set the TextureView for the color attachments


***** RenderPassLayer *****
>> Mental Model: "A RenderPassLayer will contain pipeline updates and draw calls that share vertex/fragment shaders."
- (contains) RenderPipeline
- (contains) 0+ BindGroup
	* This is for bind groups that change between RenderPassLayers, but are needed for each RenderItem in the layer
	* Convention will be for these bind groups to use @group(1)
		~ Example: An array of material settings that can be referenced by each RenderItem
- (contains) 1+ MeshGroup

***** RenderPipeline *****
- For now, just manually create the whole thing

***** BindGroup *****
- (contains) [number] index
- (contains) GPUBindGroup
	For now, just manually create the whole thing

***** MeshGroup *****
- (contains) 1+ VertexBuffer 
- (contains) 0+ IndexBuffer
- (contains) [number] vertex buffer slot
- (contains) Should contains all metadata about how the vertices are structured
	* This should be used when creating the RenderPipeline
- (contains) 0+ RenderItem

***** RenderItem *****
- (contains) 0+ BindGroup
	* This is for bind groups that change between every RenderItem
	* Convention will be for these bind groups to use @group(2)
		~ Example: 1 or more textures and samplers specific to a RenderItem
- (contains) MeshDescriptor
- (contains) [number] instance count
- (contains) [number] start instance
- (contains) [bool] isActive

---------------------------------------------------------------------------------------

Renderer::Render()
- Create new CommandEncoder
- foreach RenderPass:
	RenderPass::Render(CommandEncoder)
- device.queue.submit(CommandEncoder::finish()])


RenderPass::Render()
- Call RenderPassDescriptor::Prepare()
	- This calls a callback to prepare any necessary state for the descriptor
	- A common example is to get a view of the current texture of the GPUCanvasContext
- Create new RenderPassEncoder = CommandEncoder::beginRenderPass(RenderPassDescriptor)
- foreach BindGroup:
	RenderPassEncoder::SetBindGroup(BindGroup.index, BindGroup.bindGroup)
- foreach RenderPassLayer:
	RenderPassLayer::Render()
- RenderPassEncoder::end()


RenderPassLayer::Render()
- RenderPassEncoder::setPipeline(RenderPipeline)
- foreach BindGroup:
	RenderPassEncoder::SetBindGroup(BindGroup.index, BindGroup.bindGroup)
- foreach MeshGroup:
	if (MeshGroup::HasActiveRenderItems())
		MeshGroup::Render()


MeshGroup::Render()
- RenderPassEncoder::SetVertexBuffer(MeshGroup.VertexBuffer)
- if (indexBuffer)
	RenderPassEncoder::SetIndexBuffer(MeshGroup.IndexBuffer)
- foreach RenderItem:
	if (RenderItem::IsActive())
	  RenderItem::Render()


RenderItem::Render()
- Issue draw or drawIndexed call


